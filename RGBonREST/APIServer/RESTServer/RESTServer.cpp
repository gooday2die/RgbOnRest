//
// @file : RESTServer.cpp
// @author : Gooday2die (Isu Kim) @ dev.gooday2die@gmail.com
// @brief : A file that implements all member functions for class RESTServer
//

#include "RESTServer.h"


/**
 * A constructor member function for class RESTServer.
 * This initializes all listeners in REST API using http_listener.open, http_listener.support.
 */
RESTServer::RESTServer() {
    ConfigReader configReader = ConfigReader(); // Read Config file.
    this->configValues = configReader.getConfigValues();
    string tmpAddr = "http://" + configValues.ip + ":" + std::to_string(configValues.port);
    cout << "[+] Starting server at " << tmpAddr << endl;

    this->baseAddress = wstring(tmpAddr.begin(), tmpAddr.end()); // The base URL for API itself.

    this->initListeners(); // Init all http_listener instances.
    this->activateListeners(); // Activate and call .open and .support for all http_listeners.
    this->startServer(); // start server (which is just an infinite loop)
}

/**
 * A destructor member function that destroys class RESTServer.
 * This closes all instances and deletes instances that were generated by activateListeners().
 * Then it will exit(0).
 */
RESTServer::~RESTServer() {
    for (auto const& x : this->listeners) {
        x.second->close();
        delete(x.second);
    }
    delete this;
    exit(0);
}

void RESTServer::activateListeners() {
    for (auto const& x : this->listeners) {
        EndPoints endPointType = (EndPoints) x.first;
        http_listener* listener = x.second;

        switch (endPointType) {
            case EndPoints::ConnectionCheck:
                listener = new http_listener(this->baseAddress + U("/general/connection"));
                listener->open().then([listener]() {}).wait();
                listener->support(methods::GET, RequestHandler::General::connection);
                break;
        }
    }
}

void RESTServer::initListeners() {
    this->listeners.insert(pair<int, http_listener*>(EndPoints::ConnectionCheck, nullptr));
}

void RESTServer::startServer() {
    while(true);
}

